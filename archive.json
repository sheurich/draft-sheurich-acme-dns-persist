{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-08-11T22:00:37.334649+00:00",
  "repo": "sheurich/draft-sheurich-acme-dns-persist",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOO4VY2c68Bvqk",
      "title": "Should `dns-persist-01` mandate DNSSEC for validation records?",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/1",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The `draft-sheurich-acme-dns-persist.txt` currently states in Section 7.1, \"Persistent Record Risks,\" that clients \"SHOULD protect validation records through appropriate DNS security measures, including:... Implementing DNS security extensions (DNSSEC) where possible\".[1] This issue seeks to open a discussion on whether this \"SHOULD\" should be elevated to a \"MUST\" for the `dns-persist-01` challenge method.\n\n**Background:**\n\nThe `dns-persist-01` method is designed for persistent DNS TXT records for domain control validation, particularly for environments where traditional, ephemeral challenge methods are impractical.[1] The draft acknowledges the inherent risks of persistent records, noting that \"DNS records are generally not authenticated end-to-end, making them potentially vulnerable to tampering\".[1]\n\n**Arguments for Mandating DNSSEC (\"MUST\"):**\n\n1.  **Enhanced Security and Integrity:** Persistent DNS records introduce a longer window of vulnerability. Mandating DNSSEC would provide cryptographic authentication of DNS data, significantly mitigating risks of spoofing and tampering, ensuring that the CA receives authentic validation information.\n2.  **Alignment with Best Practices for Persistent Identifiers:** Other drafts, such as `draft-sheth-identifiers-dns/` (\"Best Practices for Persistent References in DNS\"), explicitly mandate DNSSEC for persistent DNS references to ensure global consistency and spoofing resistance. Given that `dns-persist-01` deals with persistent records, aligning with this stronger security posture seems appropriate.\n3.  **Mitigation of Record Tampering:** The draft's own \"Security Considerations\" section (7.5) highlights \"Record Tampering and Integrity\" as a concern. Mandating DNSSEC directly addresses this vulnerability by providing a verifiable chain of trust for the DNS records.[1]\n\n**Arguments Against Mandating DNSSEC (keeping \"SHOULD\"):**\n\n1.  **Deployability and Adoption:** DNSSEC is not yet universally deployed across all domains and DNS providers. Mandating it could limit the applicability and adoption of `dns-persist-01` in certain environments, such as some IoT deployments or multi-tenant platforms, where DNSSEC implementation might be complex or unavailable.[1]\n2.  **Operational Burden:** Requiring DNSSEC could introduce additional operational complexity for domain owners and DNS providers, potentially hindering the ease of use that ACME aims to provide.\n\n**Question for the Working Group:**\n\nConsidering the security benefits of DNSSEC for persistent records versus the potential impact on deployability, should Section 7.1 of `draft-sheurich-acme-dns-persist.txt` be updated to mandate (i.e., change \"SHOULD\" to \"MUST\") the use of DNSSEC for `dns-persist-01` validation records?\n\nWe invite discussion on the trade-offs and implications of such a change for both security and widespread adoption.\n",
      "createdAt": "2025-06-17T19:40:31Z",
      "updatedAt": "2025-07-30T23:16:57Z",
      "closedAt": "2025-07-30T23:16:57Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree DNSSEC security is nice and it plays well with persistent records.\n\nHowever, the adoption is just too low and this method well essentially be unusable to most if DNSSEC is mandated. Also, some are even starting to bet against DNSSEC in favor of other DNS security measures that may come down the road.\n\nI strongly recommend against mandating DNSSEC.",
          "createdAt": "2025-07-29T02:43:32Z",
          "updatedAt": "2025-07-29T02:43:32Z"
        },
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "Closing this issue as we are not planning to mandate DNSSEC.",
          "createdAt": "2025-07-30T23:16:57Z",
          "updatedAt": "2025-07-30T23:16:57Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOO4VY2c68B0CU",
      "title": "Discussion: Referencing draft-sheth-identifiers-dns in dns-persist-01",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/2",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This issue seeks to discuss the appropriateness and method of referencing `draft-sheth-identifiers-dns` (\"Best Practices for Persistent References in DNS\") within the `draft-sheurich-acme-dns-persist.txt` document. Both documents deal with aspects of persistent DNS records, but their scope and current maturity levels differ.\n\n**Background:**\n\n* **`draft-sheurich-acme-dns-persist.txt` (dns-persist-01):** Defines a specific ACME challenge method for persistent DNS TXT record validation. It aims to align with CA/Browser Forum Baseline Requirements for persistent DNS TXT record validation.\n* **`draft-sheth-identifiers-dns`:** Provides general best practices for establishing and maintaining persistent associations between a global DNS domain name and various use-case-specific references, with a strong emphasis on mandating DNSSEC for cryptographic verifiability.\n\n**Considerations for Referencing `draft-sheth-identifiers-dns`:**\n\n**Arguments for Incorporating/Referencing (e.g., Informatively):**\n\n1.  **Broader Context and Best Practices:** `draft-sheth-identifiers-dns` offers valuable insights into the general principles and best practices for persistent DNS records, which could provide useful context for implementers of `dns-persist-01`.\n2.  **Security Alignment:** Both drafts address the security of persistent DNS records. `draft-sheth-identifiers-dns`'s strong emphasis on DNSSEC for integrity aligns with the security goals of `dns-persist-01`, which acknowledges \"Record Tampering and Integrity\" as a risk (Section 7.5).\n\n**Arguments Against Normative Incorporation/Referencing at this Stage:**\n\n1.  **Maturity Level (Both are Internet-Drafts):** Both `draft-sheurich-acme-dns-persist.txt` and `draft-sheth-identifiers-dns` are Internet-Drafts. IETF policy generally states that it's inappropriate to use Internet-Drafts as stable reference material. Normatively referencing one draft from another is typically discouraged and can cause significant publication delays.\n2.  **Scope and Mandate Differences:** `draft-sheth-identifiers-dns` *mandates* DNSSEC for persistent references. In contrast, `dns-persist-01` currently *recommends* DNSSEC (\"SHOULD... where possible,\" Section 7.1). A normative reference would implicitly introduce a stronger DNSSEC requirement for `dns-persist-01`, which is a notable policy decision.\n3.  **Stability of Content:** As drafts, their content is subject to change, revision, or even abandonment. A normative reference would tie the stability of `dns-persist-01` to an evolving external document, potentially conflicting with IETF's requirements for stable, archivable normative references.\n\n**Proposed Question for the Working Group:**\n\nGiven the current status of both documents as Internet-Drafts, their differing scopes, and the IETF's referencing policies, should `draft-sheurich-acme-dns-persist.txt` include a reference to `draft-sheth-identifiers-dns`? If so, what type of reference (e.g., informative, with a note about its draft status) would be most appropriate, and what are the implications for the `dns-persist-01` specification, particularly regarding DNSSEC requirements?\n\nWe invite discussion on how best to acknowledge relevant external work while maintaining the stability and clarity of the `dns-persist-01` specification.",
      "createdAt": "2025-06-17T19:48:44Z",
      "updatedAt": "2025-08-07T15:59:22Z",
      "closedAt": "2025-08-07T15:59:22Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "My personal thoughts are the document should proceed with an informative reference to these and minimal incorporating language (for now). The WG members can provide input as the document progresses.",
          "createdAt": "2025-07-29T02:40:19Z",
          "updatedAt": "2025-07-29T02:40:19Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOO4VY2c68LnPI",
      "title": "Evaluate Policy String Clarity",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/3",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "**Evaluate Policy String Clarity for Persistent DNS Challenge Records**\n\nThe current policy values for persistent DNS challenge records are:  \n- `specific-subdomains-only`  \n- `wildcard-allowed`\n\nWe should assess whether these terms are clear and unambiguous for both technical and non-technical readers. Consider:\n\n- Are the terms self-explanatory?\n- Could shorter or more conventional wording improve clarity?\n- Are there established precedents in relevant standards or software?\n\nSuggestions for alternative wording and feedback on current terminology are welcome!",
      "createdAt": "2025-06-18T14:41:48Z",
      "updatedAt": "2025-07-23T13:48:35Z",
      "closedAt": "2025-07-23T13:48:35Z",
      "comments": [
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "After careful review and consideration of existing standards, I propose changing the policy values to improve clarity, conciseness, and alignment with precedent.\n\n**Analysis of Current Terms:**\n\n*   `specific-subdomains-only`: This term, while descriptive, is overly verbose for a technical parameter. It's cumbersome to read and prone to typos.\n*   `wildcard-allowed`: This is clearer, but the `-allowed` suffix is redundant. The presence of the policy value itself implies permission.\n\n**Precedent in IETF Standards:**\n\nThe most relevant precedent is **RFC 8659 (CAA)**, which uses short, effective tags to define certificate issuance policy in DNS:\n*   `issue` (for specific FQDNs)\n*   `issuewild` (for wildcard domains)\n\nThis establishes a clear pattern of using concise, single-word tags for policy expression.\n\n**Proposal:**\n\nI recommend aligning with this precedent by adopting simpler, more direct terms for the `policy` parameter values:\n\n1.  Change `specific-subdomains-only` to **`subdomains`**.\n2.  Change `wildcard-allowed` to **`wildcard`**.\n\n**Justification:**\n\n*   **Clarity & Conciseness:** The new terms are direct and unambiguous. `wildcard` is a standard term of art, and `subdomains` is an intuitive descriptor for the intermediate scope.\n*   **Alignment with Precedent:** Using `wildcard` directly mirrors the concept of `issuewild` from CAA, making the specification more consistent with the existing DNS security ecosystem.\n*   **Improved Readability:** The resulting DNS TXT record is much cleaner.\n    *   **Before:** `... policy=specific-subdomains-only`\n    *   **After:** `... policy=subdomains`\n*   **Logical Hierarchy:** This creates a clear and progressive authorization scope:\n    *   **No `policy` value:** FQDN only (base case)\n    *   `policy=subdomains`: FQDN + specific subdomains\n    *   `policy=wildcard`: FQDN + subdomains + wildcard (highest privilege)\n\nThis change would make the `dns-persist-01` method easier to implement correctly and more intuitive for operators to use.",
          "createdAt": "2025-07-23T13:42:19Z",
          "updatedAt": "2025-07-23T13:42:19Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOO4VY2c7CHbP-",
      "title": "Clarify handling of ambiguous/edge cases",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/5",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The draft should provide clearer guidance on several edge cases to ensure consistent implementation:\n\n- **Multiple TXT Records:** Specify how a CA should behave if multiple TXT records are found at the same Authorization Domain Name. The recommended behavior is to succeed if at least one record is valid.\n- **Malformed  Parameter:** Define the expected behavior if the  parameter is syntactically incorrect (e.g., ). Should the record be ignored, or should the entire validation fail?\n- **Interaction with CAA:** Add a non-normative note to clarify that this validation method does not bypass standard CAA checking requirements (RFC 8659).",
      "createdAt": "2025-07-23T15:00:26Z",
      "updatedAt": "2025-07-23T15:23:26Z",
      "closedAt": "2025-07-23T15:23:26Z",
      "comments": [
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "Duplicate",
          "createdAt": "2025-07-23T15:23:26Z",
          "updatedAt": "2025-07-23T15:23:26Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOO4VY2c7CHbz3",
      "title": "Clarify handling of ambiguous/edge cases",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/6",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The draft should provide clearer guidance on several edge cases to ensure consistent implementation:\n\n- **Multiple TXT Records:** Specify how a CA should behave if multiple TXT records are found at the same Authorization Domain Name. The recommended behavior is to succeed if at least one record is valid.\n- **Malformed `policy` Parameter:** Define the expected behavior if the `policy` parameter is syntactically incorrect (e.g., `policy=subdomains;wildcard`). Should the record be ignored, or should the entire validation fail?\n- **Interaction with CAA:** Add a non-normative note to clarify that this validation method does not bypass standard CAA checking requirements (RFC 8659).",
      "createdAt": "2025-07-23T15:01:06Z",
      "updatedAt": "2025-08-07T15:37:05Z",
      "closedAt": "2025-08-07T15:37:05Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "Multiple records: I think only one needs to match (allows multiple CAs for same domain)\nMalformed records: the record that was malformed cannot be used, other clean records can still complete the validation\nInteraction with CAA: I would probably just avoid such a note. Its not relevant in a private PKI setting and its not clear to me anyone would have that interpretation (I guess the records look similar but that's a bit of a stretch).",
          "createdAt": "2025-07-29T02:38:31Z",
          "updatedAt": "2025-07-29T02:38:31Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOO4VY2c7CHcmI",
      "title": "Enhance Security Considerations",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/7",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The Security Considerations section could be enhanced with more specific guidance:\n\n- **Account Key Rotation:** Add a note clarifying the operational procedure for key rotation. Specifically, state that the `accounturi` is a stable identifier and does not need to be changed in DNS when the client rotates their account key with the CA.\n- **Certificate Transparency Log Monitoring:** Mention that CT logs can reveal the use of this persistent validation method, making those domains higher-value targets and reinforcing the need for diligent DNS monitoring.",
      "createdAt": "2025-07-23T15:02:10Z",
      "updatedAt": "2025-08-07T15:01:11Z",
      "closedAt": "2025-08-07T15:01:11Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "I like the account key rotation note.\n\nA conversation that came up in ACME WG was if we need to clarify that a single ACME account could be associated with multiple URIs to avoid the anonymity leak caused by showing which domains are validated with which accounts. BTW, RFC 8657 put accounturis in DNS and never had to deal with this, so I am still 50/50 if this is actually our concern.\n\nRight now CT alone does not which validation method people used (this is a proposed change which I support). Its also not clear to me that domains using this are particularly vulnerable to DNS attacks given that any dns attack can lead to a mis-issued certificate even if the domain is not using this method.",
          "createdAt": "2025-07-29T02:36:14Z",
          "updatedAt": "2025-07-29T02:36:14Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOO4VY2c7CHc1W",
      "title": "Provide more explicit implementation guidance",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/8",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The draft could provide more explicit guidance for implementers:\n\n- **Guidance on Choosing TTLs:** Add a non-normative note to the \"Client Implementation Guidelines\" suggesting a reasonable range for TTL values (e.g., 1 to 24 hours) to balance persistence with timely revocation.\n- **Error Reporting:** Suggest specific ACME error types (from RFC 8555) for common validation failures, such as `urn:ietf:params:acme:error:unauthorized` for a mismatched `accounturi` or `urn:ietf:params:acme:error:malformed` for an unparsable TXT record. This will help client developers provide better debugging feedback to users.",
      "createdAt": "2025-07-23T15:02:29Z",
      "updatedAt": "2025-08-07T14:53:13Z",
      "closedAt": "2025-08-07T14:53:13Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "We may be stepping on some DNSOP toes if we add advise on TTLs. The field is a bit overloaded since it means 2 things: 1) how the DNS infrastructure should handle caching (which can have serious performance implications) and 2) how often CAs should revalidate. avoiding a recommendation in it avoids conflicts with DNSOP recommendations.\n\nI do like the better error types",
          "createdAt": "2025-07-29T02:31:38Z",
          "updatedAt": "2025-07-29T02:31:38Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOO4VY2c7CW13F",
      "title": "Add `persistUntil` parameter",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/9",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "## Summary\nAdd support for the `persistUntil` parameter recently added to the CA/Browser Forum Baseline Requirements' \"DNS TXT Record with Persistent Value\" DCV method. This parameter allows domain owners to explicitly specify an expiration date for their persistent DNS validation record.\n\n## Detailed Requirements\n\n### Add to Conventions and Definitions (Section 2)\nAdd definition for `persistUntil`:\n```\npersistUntil\n: An optional parameter in the validation record that specifies the timestamp after which the validation record should no longer be considered valid by CAs, regardless of the CA's validation data reuse period. The value MUST be a base-10 encoded integer representing a UNIX timestamp (the number of seconds since 1970-01-01T00:00:00Z).\n```\n\n### Update Challenge Response and Verification (Section 4)\nAdd a new numbered point to the RDATA requirements:\n```\n5. The issue-value MAY contain a `persistUntil` parameter. If present, the value MUST be a base-10 encoded integer representing a UNIX timestamp (the number of seconds since 1970-01-01T00:00:00Z) specifying the date and time after which the validation record is no longer valid. CAs MUST NOT consider this validation record valid after the specified timestamp, regardless of their validation data reuse period.\n```\n\n### Update Validation Data Reuse and TTL Handling (Section 4.2)\nModify to include logic for handling `persistUntil`:\n```\nCAs MAY reuse validation data obtained through this method for the duration of their validation data reuse period, subject to the TTL constraints described in this section. However, if a `persistUntil` parameter is present in the DNS TXT record, the CA MUST NOT reuse the validation data after the date and time specified in that parameter, even if the CA's validation data reuse period would otherwise allow it.\n```\n\n### Update Examples (Section 8)\nAdd examples showing the `persistUntil` parameter in use:\n```\n_validation-persist.example.com. IN TXT \"authority.example; accounturi=https://ca.example/acct/123; persistUntil=1721952000\"\n```\n\nAdd another example combining multiple parameters:\n```\n_validation-persist.example.com. IN TXT \"authority.example; accounturi=https://ca.example/acct/123; policy=wildcard; persistUntil=1721952000\"\n```\n\n### Update Security Considerations (Section 5)\nAdd a new subsection addressing `persistUntil` security considerations:\n```\n## persistUntil Parameter Considerations\n\nThe `persistUntil` parameter provides domain owners with direct control over the validity period of their validation records. CAs and clients should be aware of the following considerations:\n\n- Domain owners should set reasonable expiration dates that balance security needs with operational convenience.\n- CAs MUST properly parse and interpret the UNIX timestamp value as a base-10 integer and apply the expiration correctly.\n- CAs MUST reject or consider expired any validation record where the current time exceeds the `persistUntil` timestamp.\n```\n\n### Update Revocation and Invalidation section (Section 5.5)\nAdd language about `persistUntil`:\n```\nCAs MUST also invalidate authorizations when the current time exceeds the timestamp specified in a `persistUntil` parameter, even if the DNS TXT record remains present and would otherwise be valid.\n```\n\n## Additional Considerations\n\n1. Consider adding implementation guidance for ACME clients on selecting appropriate timestamp values and creating processes to update or rotate validation records before they expire.\n\n2. Consider recommending reasonable bounds for `persistUntil` values (e.g., not more than X years in the future) to balance security with operational flexibility.\n\n## References\n- CA/Browser Forum Baseline Requirements PR that introduced this parameter: [SC-088] DNS TXT Record with Persistent Value DCV Method (slghtr-says/servercert#3)",
      "createdAt": "2025-07-24T18:07:19Z",
      "updatedAt": "2025-08-01T15:54:30Z",
      "closedAt": "2025-08-01T15:54:30Z",
      "comments": []
    },
    {
      "number": 10,
      "id": "I_kwDOO4VY2c7CXFXS",
      "title": "Clarify TXT Record Parsing Rules",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/10",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "**Summary:**\nThe draft relies on RFC 8659's `issue-value` syntax but does not specify how to handle common parsing edge cases. This ambiguity could lead to interoperability issues between different CA and client implementations when validating the TXT record.\n\n**Details for Implementers:**\nA developer building a CA or client would need clear answers to the following questions to ensure their implementation is robust and interoperable:\n\n*   **Whitespace Handling:** Is whitespace significant? For example, are `policy=wildcard` and `policy = wildcard` equivalent? The specification should explicitly state whether implementations MUST trim leading/trailing whitespace from keys and values.\n*   **Duplicate Parameters:** How should a CA handle a record that contains the same parameter more than once (e.g., `...; policy=subdomains; policy=wildcard`)? Should the record be rejected as malformed, or does the first (or last) instance take precedence?\n*   **Parameter Casing:** The `policy` parameter is explicitly defined as case-insensitive. Does this rule apply to all parameter keys (e.g., is `persistUntil` equivalent to `persistuntil`)? This should be clarified for all current and future parameters.\n\n**Recommendation:**\nAdd a new subsection to \"Challenge Response and Verification\" that explicitly defines the parsing rules for the TXT record RDATA. This section should mandate the following:\n\n1.  Parameter keys MUST be compared in a case-insensitive manner.\n2.  Leading and trailing whitespace around parameter keys and values MUST be ignored.\n3.  The presence of duplicate parameter keys MUST cause the record to be rejected as malformed.\n",
      "createdAt": "2025-07-24T18:31:08Z",
      "updatedAt": "2025-08-07T14:43:20Z",
      "closedAt": "2025-08-07T14:43:20Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "I would avoid putting any additional specifications on the RFC 8659 pull in. Doesn't RFC 8659 ABNF syntax definition already provide strict rules on things like whitespace parsing?\n\nIf we feel the  RFC 8659 is not sufficient, we could pull in the ABNF from my draft ( https://birgelee.github.io/birgelee-acme-dns-persist-01/draft-birgelee-acme-dns-persist.html#section-3.1 ) This syntax is largely copied from RFC 8659. I don't really like the \"its like this, but different in this way\" type of standard. If we need to differ, I think there should be a proper definition in the document.",
          "createdAt": "2025-07-29T02:27:27Z",
          "updatedAt": "2025-07-29T02:27:27Z"
        },
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "The draft requires the TXT record RDATA to strictly conform to the \"issue-value\" syntax in RFC 8659, including all whitespace and parsing rules. Since we do not diverge from RFC 8659, there\u2019s no need to restate its ABNF or clarify parsing further. I\u2019ll close this issue.",
          "createdAt": "2025-08-07T14:43:20Z",
          "updatedAt": "2025-08-07T14:43:20Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOO4VY2c7CXGHw",
      "title": "Define Precedence for Authorization Expiration",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/11",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "**Summary:**\nThe draft now has three mechanisms that determine the lifetime of a validation authorization: the CA's internal `Validation Data Reuse Period`, the DNS record's TTL, and the `persistUntil` timestamp. The exact interaction and order of operations between these three is not perfectly clear, which could lead to different CAs calculating different expiration dates.\n\n**Details for Implementers:**\nAn implementer needs a precise formula for calculating an authorization's final validity to ensure consistent behavior.\n\n*   What is the exact order of operations? Is the final expiration timestamp `min(CA_reuse_period_end_date, persistUntil_timestamp)`?\n*   How does the TTL check relate to this final expiration? Is its role only to determine the *frequency* of re-validation, or can it shorten the absolute lifetime of the authorization itself?\n\n**Recommendation:**\nUpdate Section 4.2 (\"Validation Data Reuse and TTL Handling\") to clarify the order of precedence. The logic should be explicitly stated as follows:\n\n1.  The absolute expiration date of a validation authorization is the **earliest** of:\n    a. The date defined by the CA's internal `Validation Data Reuse Period`.\n    b. The timestamp specified in the `persistUntil` parameter, if present.\n2.  The DNS record's TTL is used to determine the *frequency* at which the CA MUST re-validate the record within its period of validity. This ensures that the record is checked for changes or removal in a timely manner, but does not override the absolute expiration date calculated above.",
      "createdAt": "2025-07-24T18:32:24Z",
      "updatedAt": "2025-08-07T14:37:15Z",
      "closedAt": "2025-08-07T14:37:14Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "there was talk about this at the CA/B Forum, Slaughter's stance which seems to be the direction the ballot is moving in is that validation expiry can be >  persist until.\n\nWe discussed this type of min clause, but Slaughter's stance was it was a simpler flow to interpret the record as:\nA DNS record can lead to a valid authorization so long as the time of the check <= persistUntil\nWhen a valid authorization is generated, its reuse period is max(8h, TTL).\n\nIf we are avoiding any normative language regarding reuse period (which I think we should), the only normative requirement would be that when you check the DNS record, current_timestamp <= persistUntil",
          "createdAt": "2025-07-29T02:22:42Z",
          "updatedAt": "2025-07-29T02:22:42Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOO4VY2c7CXGkW",
      "title": "Resolve Conflicting Re-validation Frequency Language",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/12",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "**Summary:**\nSection 5.5 (\"Revocation and Invalidation\") contains conflicting guidance for CAs on how frequently they must re-check a persistent validation record, using both `SHOULD` and `MUST` in a way that creates ambiguity.\n\n**Details for Implementers:**\nThe text currently states:\n> \"The frequency of these re-checks **SHOULD** be at least as often as the effective Validation Data Reuse Period... and **MUST** occur no less frequently than every 8 hours\"\n\nThis creates a contradiction for an implementer. For example, if a record's TTL is 24 hours, its \"effective reuse period\" becomes 24 hours. The `SHOULD` clause implies a 24-hour re-check is acceptable, but the `MUST` clause requires an 8-hour re-check. Since `MUST` always takes precedence, the `SHOULD` clause is confusing and should be removed or rephrased to prevent misinterpretation.\n\n**Recommendation:**\nSimplify the sentence in Section 5.5 to remove the ambiguity. A clearer statement would be:\n\n> \"Certificate Authorities (CAs) implementing this method MUST periodically re-check active `dns-persist-01` authorizations to confirm the continued presence and validity of the DNS TXT record. These re-checks MUST occur at least as frequently as the record's TTL, but in no case less frequently than every 8 hours.\"",
      "createdAt": "2025-07-24T18:33:16Z",
      "updatedAt": "2025-08-01T15:54:51Z",
      "closedAt": "2025-08-01T15:54:51Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "I would personally remove the recheck requirement. I am not aware of any precedent for CAs to recheck an authorization while it is still valid. I think the controls on authorization reuse and validity (which will be included in security considerations) properly define the required recheck rules that will be in effect. Putting a recheck mandate in the validation method seems super confusing to me.",
          "createdAt": "2025-07-29T02:14:16Z",
          "updatedAt": "2025-07-29T02:14:16Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOO4VY2c7CXHXN",
      "title": "Add Implementation Guidance for ACME Clients",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/13",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "**Summary:**\nThe draft provides guidance for CAs but lacks specific, non-normative advice for developers implementing ACME clients. This could lead to inconsistent client behavior, particularly around setting `persistUntil` values and handling errors.\n\n**Details for Implementers:**\nA client developer may have the following questions:\n\n*   **Choosing `persistUntil`:** What is a \"reasonable\" default value for the `persistUntil` parameter? Without guidance, some clients might create very long-lived authorizations by default, while others might require manual configuration.\n*   **Error Handling:** What specific ACME error type (e.g., `urn:ietf:params:acme:error:malformed`, `urn:ietf:params:acme:error:unauthorized`) should a client expect from a CA for failures related to this challenge? For instance, what error is returned for an expired `persistUntil` timestamp or a TXT record with duplicate parameters? Knowing the expected error type is crucial for providing useful feedback to the user.\n\n**Recommendation:**\n1.  Add a non-normative paragraph to the \"Client Implementation Guidelines\" (Section 7.2) suggesting reasonable defaults or configuration strategies for the `persistUntil` value (e.g., \"Clients may wish to default to a 90-day lifetime, aligning with common certificate lifetimes, while allowing users to configure longer periods.\").\n2.  Add a paragraph to \"Challenge Response and Verification\" (Section 4) specifying the ACME error types that CAs should return for the new failure modes (e.g., \"CAs should return a `malformed` error for invalid syntax and an `unauthorized` error if the validation fails due to an expired `persistUntil` timestamp.\").",
      "createdAt": "2025-07-24T18:34:18Z",
      "updatedAt": "2025-08-07T14:28:05Z",
      "closedAt": "2025-08-07T14:28:05Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "I am fine with point 2 (recommendations on CA error codes). I generally think it could be helpful to keep this text minimal, but some sane errors could not hurt.\n\nI would probably not recommend saying anything about how to set persistUntil. 1) the ACME client may or may not be actually setting that. It may have been set by a sysadmin that never read this RFC, so its not clear to me this is the right place to put guidance, 2) I am not sure we are going to get this advise right. There are so many considerations that rely largely on external context and break down in the non-web PKI setting, I can't really see a good way of giving general guidance that will be relevant across contexts and though the lifetime of the RFC's usage.  3) some CAs describe persistUnitil as a time bomb for certificates to break. Personally I somewhat agree and I would not set one of these on records I configure in most cases.\n\nSomewhat contrived but possible real world fallout from bad language around persistUntil: one year from now a ton of people use this method and lets say we recommend a persistUntil of +10 years. 11 years from now a bunch of popular websites may go offline because no one was checking a record that otherwise never needed to be updated.",
          "createdAt": "2025-07-29T02:08:53Z",
          "updatedAt": "2025-07-29T02:08:53Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOO4VY2c7CXrVS",
      "title": "Clarify CA Behavior for Pre-existing Validation Records",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/15",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "## Summary:\nThe draft should clarify that a Certification Authority (CA) may check for a pre-existing dns-persist-01 record upon receiving a new authorization request. If a valid record is found that is already bound to the requesting ACME account, the CA may immediately grant the authorization, bypassing the standard pending challenge flow. This would significantly improve the user experience by providing \"instant validation\" in many cases.\n\n## Problem and Motivation:\nA key benefit of a persistent validation method is the ability to \"set it and forget it.\" An ACME client should be able to request a certificate for a domain that\nalready has a valid dns-persist-01 record in place and receive it without unnecessary delay.\n\nThe current draft does not explicitly describe this accelerated flow. An implementer might assume they must always return a pending challenge, even when sufficient information for validation is already available. Formally specifying this behavior would encourage CAs to implement a more efficient and user-friendly validation process.\n\n## Proposed Solution (A \"Just-in-Time\" Check):\nThe draft should be updated to permit the following optional CA behavior:\n\n1. An ACME client, associated with a specific accounturi, submits a newOrder request to the CA for a domain identifier.\n2. Upon receiving the request, the CA MAY perform a DNS lookup for the corresponding _validation-persist TXT record.\n3. The CA then validates the record's contents. This check MUST include ensuring that the accounturi parameter in the DNS record exactly matches the accounturi of the requesting client.\n4. If the record is present and fully valid (correct issuer, valid timestamp, matching account URI, etc.), the CA MAY immediately move the authorization to the valid state and return it to the client, forgoing the need to issue a pending challenge object.\n5. If no record is found, or if the record is invalid for any reason (including a mismatched accounturi), the CA MUST proceed with the standard flow by returning a pending authorization with a dns-persist-01 challenge.\n\nThis \"just-in-time\" approach provides the speed benefit of pre-validation without requiring CAs to perform impractical, wide-scale DNS scanning.\n\n## Recommendation:\nAdd a paragraph to the \"Challenge Response and Verification\" section (Section 4) to explicitly describe this behavior:\n\n> \"Upon receiving a request for a new authorization, a CA MAY check for the presence of a pre-existing, valid DNS TXT record for the requested domain identifier. If a record is found that meets all requirements of this specification, including that the accounturi parameter matches the ACME account making the request, the CA MAY consider the authorization immediately valid and move it to the valid state. If no such record is found, the CA MUST proceed with the standard challenge process by returning a pending authorization.\"\n",
      "createdAt": "2025-07-24T19:24:18Z",
      "updatedAt": "2025-08-07T14:06:51Z",
      "closedAt": "2025-08-07T14:06:51Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "I support the proposed text",
          "createdAt": "2025-07-29T01:59:03Z",
          "updatedAt": "2025-07-29T01:59:03Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOO4VY2c7C_F2k",
      "title": "Align timestamp definition with IEEE standard",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/16",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "Update the ACME method draft to use the IEEE standard definition for timestamps, specifying integer values. Cite the IEEE standard in both the document and the CAB form. Avoid referencing the JSON RFC for timestamp definition.\n",
      "createdAt": "2025-07-28T21:05:36Z",
      "updatedAt": "2025-08-01T15:54:30Z",
      "closedAt": "2025-08-01T15:54:30Z",
      "comments": [
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16",
          "createdAt": "2025-07-28T21:10:00Z",
          "updatedAt": "2025-07-28T21:10:00Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOO4VY2c7C_F_b",
      "title": "Remove MPIC and DNSSEC from normative requirements",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/17",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "Update the ACME method draft to remove references to MPIC and DNSSEC from the normative requirements section. Retain these references only in the security considerations section.",
      "createdAt": "2025-07-28T21:05:55Z",
      "updatedAt": "2025-08-01T15:54:51Z",
      "closedAt": "2025-08-01T15:54:51Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "\ud83d\udc4d ",
          "createdAt": "2025-07-29T02:44:07Z",
          "updatedAt": "2025-07-29T02:44:07Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOO4VY2c7C_GF1",
      "title": "Allow issuer domains as semicolon-separated string",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/18",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "From discussion\n> Update the ACME method draft to allow issuer domains to be specified as a semicolon-separated string. This change is intended to support certificate authorities (CAs) that wish to provide multiple issuer domain options.\n",
      "createdAt": "2025-07-28T21:06:08Z",
      "updatedAt": "2025-08-10T15:54:19Z",
      "closedAt": "2025-08-10T15:54:19Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "\ud83d\udc4d ",
          "createdAt": "2025-07-29T02:43:50Z",
          "updatedAt": "2025-07-29T02:43:50Z"
        },
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "@birgelee I think using multiple TXT records might be better. CAA handles multiple authorized issuers by using multiple, separate CAA RRs. Following the same pattern, dns-persist-01 should use multiple TXT records as well. \n\nThis would offer clearer manageability, as adding or removing a CA is an atomic DNS operation, and it maintains a very clear one-to-one binding between an issuer and an account.",
          "createdAt": "2025-08-08T00:10:21Z",
          "updatedAt": "2025-08-08T00:10:21Z"
        },
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there is some confusion over this open issue. For cases where a subscriber wants to authorize multiple CAs, 100% we should go with multiple TXT records. Each TXT record should only authorize a single CA with a single issuer domain.\n\nThis is regarding the \"issuer-domain-name\" sent by the CA to the ACME client as part of the ACME protocol before the TXT record is checked. I think the current single \"issuer-domain-name\" is highly problematic as it is very commonplace for large CAs to have many issuer domain names and allow clients flexibility as to which issuer domain name is chosen. If you read digicert's documentation you can see the extensive nature of their permissible CAA values including several subsidiaries, resellers, partners and previous acquisitions:  https://docs.digicert.com/en/certcentral/manage-certificates/dns-caa-resource-record-check.html (section Valid CAA resource record values ).\n\nThis is often used to allow flexibility and smooth transitions when resellers change back ends or acquisitions occur. A concrete recent example of this was Sectigo's purchase of Entrust's web PKI business. Existing Entrust customers with CAA records reading \"entrust.net\" are now being directed to Sectigo issuance infrastructure. However, its likely many of these customers will retain the Entrust CAA records. As part of the negotiated agreement, Sectigo is now allowed to sign on \"entrust.net\" CAA records (see page 52 of the Sectigo CPS https://www.sectigo.com/uploads/files/Sectigo_TLS_CPS_v6_1_1.pdf ).\n\nIf we now imagine the Sectigo/Entrust situation but with the current wording of  dns-persist-01 involved, there are some implementation complications on Sectigo's part. Sectigo is most likely to implement the SC-088 DNS record check using the same set of issue domains permissible in CAA records (I believe this is literally the wording present in the SC-088 ballot). This would allow DNS persist records to be smoothly inherited from Entrust the same way CAA records are. However, under the current draft text, before performing that check, Sectigo's ACME infrastructure must pick ***a single*** issuer-domain-name to send to ACME clients as \"the right one\". Furthermore, the draft text specifies that Sectigo must check against only that single issuer-domain-name even though SC-088 permits the entire set communicated in the CPS. Given that 1) ACME accounts may be migrated from the old Entrust infrastructure, and 2) Sectigo probably wants to still support the entrust.net issuer-domain-name while also encouraging subscribers to migrate to sectigo.com , I personally think its very hard for Sectigo to predict which identifier is the right one to send.\n\nSome solutions I don't think are optimal are:\n1) enumerate multiple challenge options each one with its own identifier. To me this feels like a sloppy overload of the ability of the ACME protocol to have multiple challenges. There are like ~5 good ACME challenge types and Digicert has 20 different issuer domains (80% of available challenges are just variants of dns-persist-01). Also, the client is now faced with the same problem of picking one to tell the CA its doing. The client may not be able to perform the DNS lookup to find out which issuer domain the user actually provisioned and thus which of the 20 variants of dns-persist-01 it is able to satisfy.\n2) CA does a precheck and only sends the identifier it already saw. If the CA is prechecking, this draft is not needed as the CA can sign without sending a challenge. I think this draft primarily exists for CAs that don't want to precheck and want to follow the traditional ACME protocol to avoid any operational implications for domains that don't want to use this method.\n\nThe solutions I would go with are either:\n1) removal of the issuer domain name in the ACME challenge object. I sort of like this. The loss is that clients can no longer perform a full self check. They can check for the accounturi but not the issuer name before the semicolon. The ACME client also has no means of auto-provisioning these records without the required information. However, there is an advantage that nowhere else in the ACME protocol does the concept of an issuer-domain-name come in. This is purely CAA concept, so if it can be removed entirely from the wire part of the ACME protocol, I think that's nice.\n2) (*IMO optimal*) permit multiple issuer domain names in the CA to ACME client challenge object. I think this is the best as it allows the existing practice of multiple issuer domains and allows for auto provisioning and self checks.\n\nTo sum up, the proposal is not to permit multiple issuer domains in a single TXT record, its to allow a way for a CA in the challenge object to inform the client that it will accept multiple issuer domains and permit the CA when checking the TXT record to check against any one of the issuer domains.\n\n",
          "createdAt": "2025-08-08T01:51:06Z",
          "updatedAt": "2025-08-08T01:51:06Z"
        },
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "Thanks \u2014 that clarification helped. I\u2019d originally read this as changing TXT semantics, but I now see the ask is about the challenge object.\n\n- DNS stays the same: one issuer domain + one account per TXT; multiple TXT records to authorize multiple CAs.\n- Challenge change: include multiple issuer domains and validate \u201cany-of\u201d.\n\nPlan:\n\n- Use an array field: issuer-domain-names: [\"sectigo.com\", \"entrust.net\"].\n- Semantics: server MUST accept any one of the listed issuers; clients MAY choose any one to publish.\n\nI\u2019ll update examples and normative text accordingly.",
          "createdAt": "2025-08-08T20:23:32Z",
          "updatedAt": "2025-08-08T20:23:32Z"
        },
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for taking a look at this. The new plan sounds good. I agree an array field is probably better than cramming it into a string.",
          "createdAt": "2025-08-08T20:33:43Z",
          "updatedAt": "2025-08-08T20:33:43Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOO4VY2c7C_GTq",
      "title": "Minimize prefetching details",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/19",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "Revise the ACME persist method draft to include only a brief mention of prefetching behavior, without expanding on implementation details.\n",
      "createdAt": "2025-07-28T21:06:36Z",
      "updatedAt": "2025-07-31T14:12:55Z",
      "closedAt": "2025-07-31T14:12:54Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "to be clear, I think the text proposed in the other issue is sufficiently brief.",
          "createdAt": "2025-07-29T02:00:37Z",
          "updatedAt": "2025-07-29T02:00:37Z"
        },
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "Duplicated subject; closing this issue in favor of #15.",
          "createdAt": "2025-07-31T14:12:54Z",
          "updatedAt": "2025-07-31T14:12:54Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOO4VY2c7C_HXA",
      "title": "Move MPIC & Validation Data Reuse and TTL Handling sections to security considerations",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/20",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "Remove MPIC & Validation Data Reuse and TTL Handling sections from their current location and relocate them to the security considerations section, per team discussion.\n",
      "createdAt": "2025-07-28T21:08:50Z",
      "updatedAt": "2025-08-01T15:54:51Z",
      "closedAt": "2025-08-01T15:54:51Z",
      "comments": [
        {
          "author": "birgelee",
          "authorAssociation": "COLLABORATOR",
          "body": "\ud83d\udc4d ",
          "createdAt": "2025-07-29T02:01:03Z",
          "updatedAt": "2025-07-29T02:01:03Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOO4VY2c7DhAuG",
      "title": "Improve clarity of `_validation-persist` label definition",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/21",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The definitions for \"Authorization Domain Name\" and \"DNS TXT Record Persistent DCV Domain Label\" in the \"Conventions and Definitions\" section could be reordered to improve logical flow and clarity.\n\nCurrently, \"Authorization Domain Name\" is defined before the label it uses.\n\n**Current Definition:**\n\n```\nAuthorization Domain Name\n: The domain name at which the validation TXT record is provisioned. It is formed by prepending the label \"_validation-persist\" to the FQDN being validated.\n\nDNS TXT Record Persistent DCV Domain Label\n: The label \"_validation-persist\" as specified in this document. This label is consistent with industry practices for persistent domain validation.\n```\n\n**Proposed Change:**\n\nTo improve readability, we might reorder these definitions and reference the label in the \"Authorization Domain Name\" definition.\n\n**Revised Definition:**\n\n```\nDNS TXT Record Persistent DCV Domain Label\n: The label \"_validation-persist\" as specified in this document. This label is consistent with industry practices for persistent domain validation.\n\nAuthorization Domain Name\n: The domain name at which the validation TXT record is provisioned. It is formed by prepending the DNS TXT Record Persistent DCV Domain Label to the FQDN being validated.\n```\n\nThis change makes the document easier to follow by defining the component (`_validation-persist`) before it is used in a larger construct (`Authorization Domain Name`).",
      "createdAt": "2025-07-31T12:06:46Z",
      "updatedAt": "2025-08-07T18:12:49Z",
      "closedAt": "2025-08-07T18:12:49Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOO4VY2c7Etdhe",
      "title": "Remove `subdomains` policy value",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/23",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The draft currently defines two policy values (subdomains and wildcard) for subdomain validation, which adds unnecessary complexity. The subdomains value was intended to allow specific subdomain validation without wildcard certificates, but this distinction creates confusion and implementation overhead.\n\nThis change removes the subdomains policy value entirely, leaving only wildcard as the explicit opt-in mechanism for both wildcard certificates and specific subdomain validation. This simplifies the specification while maintaining all functionality.\n\nChanges needed:\n\n- Remove policy=subdomains definition from Section 4\n- Update all examples to use only wildcard policy\n- Simplify Section 6 (Subdomain Certificate Validation)\n- Update security considerations to reference only wildcard\n- Remove comparison/distinction text between the two policies",
      "createdAt": "2025-08-07T12:10:37Z",
      "updatedAt": "2025-08-07T13:01:34Z",
      "closedAt": "2025-08-07T13:01:34Z",
      "comments": []
    },
    {
      "number": 24,
      "id": "I_kwDOO4VY2c7EwIYy",
      "title": "Align persistUntil Definition with BR Text and Remove POSIX Reference",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/24",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The current draft normatively references the IEEE POSIX standard to define the `persistUntil` timestamp. This creates an unnecessary dependency on a paywalled standard, which is not ideal for an IETF specification or for alignment with the BRs.\n\nTo address this, the normative reference to POSIX should be removed and replaced with an inline definition that is identical to the one specified in the BRs. This ensures consistency between the RFC and the BRs, avoiding any potential ambiguity or conflict, particularly regarding the handling of leap seconds.\n\nProposed Change:\n\n1. Remove the normative reference to POSIX from the document's frontmatter.\n1. Update all definitions of the persistUntil parameter to use the following text, which is aligned with the BRs:\n> The value MUST be a base-10 encoded integer representing a UNIX timestamp (the number of seconds since 1970-01-01T00:00:00Z ignoring leap seconds).\n",
      "createdAt": "2025-08-07T15:24:03Z",
      "updatedAt": "2025-08-07T21:09:53Z",
      "closedAt": "2025-08-07T21:09:53Z",
      "comments": []
    },
    {
      "number": 25,
      "id": "I_kwDOO4VY2c7FJVUd",
      "title": "Encourage the automation of `persistUntil` updates",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/25",
      "state": "CLOSED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "```\n   - Automate updates to validation records with new `persistUntil` values during certificate renewal workflows\n```",
      "createdAt": "2025-08-10T13:07:36Z",
      "updatedAt": "2025-08-10T16:19:41Z",
      "closedAt": "2025-08-10T16:19:41Z",
      "comments": []
    },
    {
      "number": 26,
      "id": "I_kwDOO4VY2c7FRH43",
      "title": "issuer-domain-names and CAA",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/26",
      "state": "CLOSED",
      "author": "TheEnbyperor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current version of the draft states that \"`issuer-domain-names` provided in the challenge object **SHOULD** be drawn from the machine-readable `caaIdentities` array in the ACME server's directory object\"; however it doesn't further discuss this. In what cases is an implemntation allowed to derrogate from the **SHOULD** and what should other implementations do in such a case. Should a client even care to check if they match?",
      "createdAt": "2025-08-11T11:23:27Z",
      "updatedAt": "2025-08-11T21:58:51Z",
      "closedAt": "2025-08-11T21:58:51Z",
      "comments": [
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "The requirement for `issuer-domain-names` to be drawn from the `caaIdentities` array has been changed from SHOULD to MAY to avoid ambiguity.\n\nThis change provides clearer guidance to implementers by removing the ambiguity around what happens when implementations don't follow the SHOULD requirement. With MAY, it's now explicit that implementations have the flexibility to use `issuer-domain-names` that differ from the `caaIdentities` array when appropriate.",
          "createdAt": "2025-08-11T21:58:10Z",
          "updatedAt": "2025-08-11T21:58:10Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOO4VY2c7FRKOh",
      "title": "Ignoring unknown keys",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/27",
      "state": "OPEN",
      "author": "TheEnbyperor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft states that \"CAs **MUST** ignore any unknown parameter keys.\" This seems like a bad idea.\n\nI get the need to have an extensible protocol, but a future extension may have undesirable semantics when a certain field is ignored. What would be better is to be able to specify critical keys, that the CA must understand to proceed.",
      "createdAt": "2025-08-11T11:25:49Z",
      "updatedAt": "2025-08-11T11:25:49Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDOO4VY2c7FRNb5",
      "title": "DNSSEC security considerations unclear",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/issues/28",
      "state": "CLOSED",
      "author": "TheEnbyperor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current security considerations for DNSSEC are unclear:\n\n> For CAs operating within the public WebPKI, the use of DNSSEC is a vital best practice for ensuring the integrity of domain validation. For private or closed PKI environments, DNSSEC is strongly recommended but may not be required, depending on the trust model and risk profile of the specific deployment.\n\nIs \"may not be required\" intending by omission to create a requirement for DNSSEC in the public web? Should we be requiring DNSSEC for this validation method to succeeed? ",
      "createdAt": "2025-08-11T11:29:10Z",
      "updatedAt": "2025-08-11T21:51:34Z",
      "closedAt": "2025-08-11T21:51:34Z",
      "comments": [
        {
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "body": "You're absolutely right that the current language is confusing and creates ambiguity about DNSSEC requirements.\n\nThe problematic language about \"vital best practice\" for public WebPKI vs \"may not be required\" for private PKI was indeed unclear and could be interpreted as creating an implicit requirement by omission.\n\nI've updated the draft to use clear, normative language instead:\n\n> \"DNSSEC signatures SHOULD be validated on `dns-persist-01` TXT records.\"\n\nThis removes the confusing distinction between public and private environments and provides straightforward guidance that implementers can apply consistently. The draft now avoids taking a position on broader regulatory requirements, letting implementers refer to their specific compliance frameworks (like CAB/F) as needed.",
          "createdAt": "2025-08-11T21:51:22Z",
          "updatedAt": "2025-08-11T21:51:22Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 4,
      "id": "PR_kwDOO4VY2c6gRgmk",
      "title": "docs: Use clearer and more concise policy terminology",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/pull/4",
      "state": "MERGED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #3",
      "createdAt": "2025-07-23T13:45:56Z",
      "updatedAt": "2025-07-23T13:48:35Z",
      "baseRepository": "sheurich/draft-sheurich-acme-dns-persist",
      "baseRefName": "main",
      "baseRefOid": "b8cefdb30edca1f60d612856f90a18a6e5088ecf",
      "headRepository": "sheurich/draft-sheurich-acme-dns-persist",
      "headRefName": "issue-3-policy-terms",
      "headRefOid": "55e7ff490b17d5d09d35719e85a9e2308ac7f6d7",
      "closedAt": "2025-07-23T13:48:34Z",
      "mergedAt": "2025-07-23T13:48:34Z",
      "mergedBy": "sheurich",
      "mergeCommit": {
        "oid": "848dead26afb7bd31baad693aea876e831cd66f4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOO4VY2c6ggeb6",
      "title": "feat: Add persistUntil parameter",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/pull/14",
      "state": "MERGED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Adds support for the `persistUntil` parameter to the `dns-persist-01`\r\nchallenge method. This parameter allows a domain owner to specify a\r\nhard expiration timestamp for the persistent validation record,\r\nenhancing security and administrative control.\r\n\r\nThe `persistUntil` value is defined as a `NumericDate` from RFC 7519\r\nto ensure a clear, standards-based implementation.\r\n\r\nThis change incorporates the following:\r\n- Defines the `persistUntil` parameter in the Conventions section.\r\n- Adds `persistUntil` to the list of valid RDATA parameters.\r\n- Adds security considerations for the new parameter.\r\n- Includes examples of its use for FQDN and wildcard validations.\r\n\r\nResolves #9\r\nResolves #16\r\n",
      "createdAt": "2025-07-24T18:39:32Z",
      "updatedAt": "2025-08-10T16:32:16Z",
      "baseRepository": "sheurich/draft-sheurich-acme-dns-persist",
      "baseRefName": "main",
      "baseRefOid": "fbf6d49e81caae10fe1986fd3cc8c405d3f83dda",
      "headRepository": "sheurich/draft-sheurich-acme-dns-persist",
      "headRefName": "persistuntil",
      "headRefOid": "43fb33c9d9986f3c508b6e9c0cf01f6829f11f6b",
      "closedAt": "2025-08-01T15:54:29Z",
      "mergedAt": "2025-08-01T15:54:29Z",
      "mergedBy": "sheurich",
      "mergeCommit": {
        "oid": "b58c44306c46aec1b670f0a900670022e7693a76"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOO4VY2c61_TKU",
          "commit": {
            "abbreviatedOid": "c2437c4"
          },
          "author": "copilot-pull-request-reviewer",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "## Pull Request Overview\n\nThis PR adds support for the `persistUntil` parameter to the `dns-persist-01` ACME challenge method, allowing domain owners to set hard expiration timestamps for validation records using RFC 7519 NumericDate format.\n\nKey changes:\n- Defines the `persistUntil` parameter using RFC 7519 NumericDate format\n- Adds validation requirements for CAs to honor the expiration timestamp\n- Includes security considerations and usage examples\n\n\n\n",
          "createdAt": "2025-07-24T20:55:31Z",
          "updatedAt": "2025-07-25T19:50:25Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "The hardcoded timestamp 1721952000 corresponds to July 26, 2024, but this example may become outdated. Consider using a relative timestamp description or a clearly future date to maintain the example's relevance over time.\n```suggestion\n_validation-persist.example.com. IN TXT \"authority.example; accounturi=https://ca.example/acct/123; persistUntil={{FUTURE_TIMESTAMP}}\"\n~~~\n\n3. CA validates the record. This validation is sufficient only for \"example.com\" and will not be considered valid after the specified timestamp (e.g., one year from now or {{FUTURE_DATE}}).\n```",
              "createdAt": "2025-07-24T20:55:31Z",
              "updatedAt": "2025-07-24T20:55:32Z"
            },
            {
              "originalPosition": 82,
              "body": "Same hardcoded timestamp issue as the previous example. The timestamp 1721952000 (July 26, 2024) may become outdated and confusing for readers accessing this documentation in the future.\n```suggestion\n_validation-persist.example.com. IN TXT \"authority.example; accounturi=https://ca.example/acct/123; policy=wildcard; persistUntil=<persistUntil>\"\n~~~\n\n3. CA validates the record. This validation authorizes certificates for \"example.com\", \"*.example.com\", and specific subdomains, but will not be considered valid after the specified timestamp indicated by `<persistUntil>`.\n```",
              "createdAt": "2025-07-24T20:55:32Z",
              "updatedAt": "2025-07-24T20:55:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c62ANoN",
          "commit": {
            "abbreviatedOid": "c2437c4"
          },
          "author": "slghtr-says",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-24T22:17:40Z",
          "updatedAt": "2025-07-24T22:17:40Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "> However, if a `persistUntil` parameter is present in the DNS TXT record, the CA MUST NOT reuse the validation data after the date and time specified in that parameter, even if the CA's validation data reuse period would otherwise allow it.\r\n\r\nThis introduces an interesting new constraint that caught my attention. Linking persistUntil to the validation reuse period, is a significant paradigm shift from the current SC-088 persistUntil approach.\r\n\r\nSC-088 treats persistUntil as a validation-time constraint rather than an issuance-time constraint (like CAA records). The domain owner uses persistUntil to control when a validation can successfully occur, but not the CA's subsequent reuse of that validation data within standard reuse periods. This creates a clean separation between validation logic and reuse period management.\r\n\r\nConnecting persistUntil to the reuse period introduces several operational complexities:\r\n\r\n1. Temporal Edge Cases: If persistUntil expires between the time the CA completes validation and issues a certificate based on that validation, this would block issuance even if those actions were seconds apart and well within the minimum eight-hour reuse period.\r\n\r\n2. Expectation Misalignment: Domain owners might change persistUntil values after validation, creating confusion about whether stored validation data remains usable.\r\n\r\n3. Implementation Complexity: CAs would need to either re-verify the persistUntil value at issuance time (using MPIC) or incorporate the persistUntil timestamp into the intial reuse\r\nperiod calculations, adding significant operational complexity.\r\n\r\nMy personal recommendation would be to keep persistUntil as a validation-time check unrelated to the reuse period to decouple the concerns. Would love to hear your thoughts.\r\n",
              "createdAt": "2025-07-24T22:17:40Z",
              "updatedAt": "2025-07-24T22:18:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c62AOhX",
          "commit": {
            "abbreviatedOid": "c2437c4"
          },
          "author": "slghtr-says",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-24T22:18:55Z",
          "updatedAt": "2025-07-24T22:18:55Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Thank you for speaking to this. My broader concern with persistUntil are related to operational availability. My fear with persistUntil is that a well-meaning operator sets a value far off in the future and loses track of it setting up a future certificate-related outage when a renewal eventually fails.\r\n\r\n",
              "createdAt": "2025-07-24T22:18:55Z",
              "updatedAt": "2025-07-24T22:18:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c62L_Yo",
          "commit": {
            "abbreviatedOid": "c2437c4"
          },
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-25T19:31:08Z",
          "updatedAt": "2025-07-25T19:31:10Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\nCAs MAY reuse validation data obtained through this method for the duration of their validation data reuse period, subject to the TTL constraints described in this section. The persistUntil parameter indicates when the DNS validation record should no longer be considered valid for new validation attempts. If a persistUntil parameter is present in the DNS TXT record, the CA MUST NOT successfully complete a validation attempt after the date and time specified in that parameter. However, the persistUntil parameter does not affect the CA's ability to reuse already-validated data within their standard validation data reuse period.\n```",
              "createdAt": "2025-07-25T19:31:09Z",
              "updatedAt": "2025-07-25T19:31:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c62L_8E",
          "commit": {
            "abbreviatedOid": "c2437c4"
          },
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-25T19:31:57Z",
          "updatedAt": "2025-07-25T19:31:57Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Thanks for the clarification; this update should track with your recommendation.",
              "createdAt": "2025-07-25T19:31:57Z",
              "updatedAt": "2025-07-25T19:31:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c62MEYL",
          "commit": {
            "abbreviatedOid": "c2437c4"
          },
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-25T19:39:52Z",
          "updatedAt": "2025-07-25T19:39:53Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Perhaps advice such as this would be beneficial:\n\n```suggestion\n- Domain owners should set expiration dates for validation records that balance security and operational needs. To avoid unexpected validation failures during certificate renewal, domain owners are advised to:\n  - Align persistUntil values with certificate lifetimes or planned maintenance intervals\n  - Monitor or set reminders for persistUntil expirations\n  - Document persistUntil practices in certificate management procedures\n  - Automate updates to validation records with new persistUntil values during certificate renewal workflows\n```",
              "createdAt": "2025-07-25T19:39:52Z",
              "updatedAt": "2025-07-25T19:39:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c62MJAT",
          "commit": {
            "abbreviatedOid": "f5c04f3"
          },
          "author": "copilot-pull-request-reviewer",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "## Pull Request Overview\n\nThis PR adds support for a `persistUntil` parameter to the `dns-persist-01` challenge method, allowing domain owners to specify a hard expiration timestamp for persistent validation records. This enhances security by providing explicit control over validation record lifetimes.\n\n- Defines the `persistUntil` parameter as a `NumericDate` timestamp from RFC 7519\n- Integrates the parameter into validation requirements and CA processing rules\n- Adds comprehensive security considerations and usage examples\n\n\n\n",
          "createdAt": "2025-07-25T19:50:23Z",
          "updatedAt": "2025-07-30T21:16:50Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The definition lacks clarity about timezone handling. NumericDate from RFC 7519 represents seconds since Unix epoch in UTC, but this should be explicitly stated to avoid confusion about timezone interpretation.\n```suggestion\n: An optional parameter in the validation record that specifies the timestamp after which the validation record should no longer be considered valid by CAs. The value MUST be a base-10 encoded integer representing a timestamp, formatted as a `NumericDate` value as defined in Section 2 of {{!RFC7519}}. A `NumericDate` represents the number of seconds since the Unix epoch (1970-01-01T00:00:00Z) in UTC.\n```",
              "createdAt": "2025-07-25T19:50:23Z",
              "updatedAt": "2025-07-25T19:50:24Z"
            },
            {
              "originalPosition": 24,
              "body": "The specification creates ambiguity about the interaction between `persistUntil` and existing validation data. It's unclear what happens when `persistUntil` expires during the CA's reuse period for already-validated data. Consider clarifying whether CAs must immediately invalidate cached validation data when `persistUntil` is reached.\n```suggestion\nCAs MAY reuse validation data obtained through this method for the duration of their validation data reuse period, subject to the TTL constraints described in this section. The `persistUntil` parameter indicates when the DNS validation record should no longer be considered valid for new validation attempts. If a `persistUntil` parameter is present in the DNS TXT record, the CA MUST NOT successfully complete a validation attempt after the date and time specified in that parameter. Additionally, when the `persistUntil` date is reached, the CA MUST immediately invalidate any cached validation data associated with the record, even if it is within the standard validation data reuse period. This ensures that the `persistUntil` parameter is respected for both new validations and the reuse of cached data.\n```",
              "createdAt": "2025-07-25T19:50:24Z",
              "updatedAt": "2025-07-25T19:50:25Z"
            },
            {
              "originalPosition": 42,
              "body": "The specification lacks validation requirements for the timestamp value. CAs should validate that the timestamp is reasonable (e.g., not in the past, not excessively far in the future) to prevent potential abuse or implementation errors.\n```suggestion\n- CAs MUST reject or consider expired any validation record where the current time exceeds the `persistUntil` timestamp.\n- CAs MUST validate the `persistUntil` timestamp to ensure it is reasonable:\n  - The timestamp MUST NOT be in the past relative to the current time.\n  - The timestamp MUST NOT be excessively far in the future. CAs SHOULD define a maximum allowable future duration (e.g., 1 year) and reject timestamps exceeding this limit.\n```",
              "createdAt": "2025-07-25T19:50:24Z",
              "updatedAt": "2025-07-25T19:50:25Z"
            },
            {
              "originalPosition": 69,
              "body": "[nitpick] The hardcoded timestamp (1721952000) in the example will become outdated quickly. Consider using a relative timestamp or a clearly future date to maintain example relevance over time.\n```suggestion\n_validation-persist.example.com. IN TXT \"authority.example; accounturi=https://ca.example/acct/123; persistUntil=1893456000\"\n```",
              "createdAt": "2025-07-25T19:50:24Z",
              "updatedAt": "2025-07-25T19:50:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c63L9G2",
          "commit": {
            "abbreviatedOid": "94b3765"
          },
          "author": "copilot-pull-request-reviewer",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "## Pull Request Overview\n\nThis pull request adds the `persistUntil` parameter to the DNS persist challenge method, allowing domain owners to specify an explicit expiration timestamp for validation records. This enhancement provides better security and administrative control over persistent DNS validation.\n\nKey changes:\n- Defines the `persistUntil` parameter as a POSIX timestamp in the Conventions section\n- Integrates the parameter into the DNS TXT record validation requirements\n- Adds security considerations and operational guidance for the new parameter\n\n\n\n",
          "createdAt": "2025-07-30T21:17:43Z",
          "updatedAt": "2025-07-30T22:54:46Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "The definition refers to 'Section 4.16 of {{!POSIX.1}}' but the POSIX.1 reference added shows 'IEEE Std 1003.1-2017' from 2018, while Section 4.16 may not exist or may have changed in this version. Consider verifying the correct section reference for epoch time definition in the 2017 standard.\n```suggestion\n: An optional parameter in the validation record that specifies the timestamp after which the validation record should no longer be considered valid by CAs. The value MUST be a base-10 encoded integer representing the number of seconds since the epoch, as defined in Section 4.15 of {{!POSIX.1-2017}}.\n```",
              "createdAt": "2025-07-30T21:17:43Z",
              "updatedAt": "2025-07-30T21:17:44Z"
            },
            {
              "originalPosition": 28,
              "body": "Same section reference issue as line 102. Additionally, this requirement creates a potential inconsistency - the text says CAs MUST NOT consider the record valid after the timestamp, but line 176 clarifies that it only affects new validation attempts, not reuse of already-validated data. Consider clarifying this distinction here as well.\n```suggestion\n5. The issue-value MAY contain a `persistUntil` parameter. If present, the value MUST be a base-10 encoded integer representing the number of seconds since the epoch, as defined in Section 4.16 of {{!POSIX.1}}. CAs MUST NOT consider this validation record valid for new validation attempts after the specified timestamp, regardless of their validation data reuse period. However, this does not affect the reuse of already-validated data.\n```",
              "createdAt": "2025-07-30T21:17:44Z",
              "updatedAt": "2025-07-30T21:17:44Z"
            },
            {
              "originalPosition": 55,
              "body": "The reference to '(see {{!POSIX.1}})' is incomplete - it should specify the section number like the other references, or if Section 4.16 is indeed correct, it should be '(see Section 4.16 of {{!POSIX.1}})'.\n```suggestion\n- CAs MUST properly parse and interpret the integer timestamp value as seconds since the epoch (see Section 4.16 of {{!POSIX.1}}) and apply the expiration correctly.\n```",
              "createdAt": "2025-07-30T21:17:44Z",
              "updatedAt": "2025-07-30T21:17:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c63Mtzj",
          "commit": {
            "abbreviatedOid": "43fb33c"
          },
          "author": "copilot-pull-request-reviewer",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "## Pull Request Overview\n\nThis PR adds support for the `persistUntil` parameter to the dns-persist-01 ACME challenge method, allowing domain owners to specify hard expiration timestamps for validation records to enhance security and administrative control.\n\nKey changes:\n- Introduces the `persistUntil` parameter as an optional RDATA parameter using POSIX timestamp format\n- Adds comprehensive security considerations and operational guidance for the new parameter\n- Includes practical examples demonstrating usage for both FQDN and wildcard validations\n\n\n\n",
          "createdAt": "2025-07-30T22:55:54Z",
          "updatedAt": "2025-07-30T22:55:55Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "The definition references 'Section 4.19 of {{POSIX}}' but this section number may not accurately correspond to the epoch definition in POSIX standards. Consider verifying the correct section reference or using a more general reference to POSIX epoch time.\n```suggestion\n: An optional parameter in the validation record that specifies the timestamp after which the validation record should no longer be considered valid by CAs. The value MUST be a base-10 encoded integer representing the number of seconds since the epoch, as defined by the POSIX standard.\n```",
              "createdAt": "2025-07-30T22:55:54Z",
              "updatedAt": "2025-07-30T22:55:56Z"
            },
            {
              "originalPosition": 85,
              "body": "The timestamp value 1721952000 in the example should be verified for accuracy. This corresponds to July 26, 2024, but the comment states it's 2024-07-26T00:00:00Z which may not match the actual UTC conversion of this timestamp.\n```suggestion\n_validation-persist.example.com. IN TXT \"authority.example; accounturi=https://ca.example/acct/123; persistUntil=1721856000\"\n```",
              "createdAt": "2025-07-30T22:55:55Z",
              "updatedAt": "2025-07-30T22:55:56Z"
            },
            {
              "originalPosition": 99,
              "body": "Same timestamp accuracy issue as the previous example. The timestamp 1721952000 should be verified to ensure it correctly represents 2024-07-26T00:00:00Z as stated in the comment.\n```suggestion\n_validation-persist.example.com. IN TXT \"authority.example; accounturi=https://ca.example/acct/123; policy=wildcard; persistUntil=1721865600\"\n```",
              "createdAt": "2025-07-30T22:55:55Z",
              "updatedAt": "2025-07-30T22:55:56Z"
            },
            {
              "originalPosition": 57,
              "body": "Repeated reference to 'Section 4.19 of {{POSIX}}' for epoch definition. This section reference should be verified for accuracy across all instances in the document.",
              "createdAt": "2025-07-30T22:55:55Z",
              "updatedAt": "2025-07-30T22:55:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOO4VY2c63MuW_",
          "commit": {
            "abbreviatedOid": "43fb33c"
          },
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "I believe #14 now accurately incorporates #16 and the reviewer comments.",
          "createdAt": "2025-07-30T22:57:15Z",
          "updatedAt": "2025-07-30T22:57:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOO4VY2c63MvqG",
          "commit": {
            "abbreviatedOid": "43fb33c"
          },
          "author": "sheurich",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-30T23:01:26Z",
          "updatedAt": "2025-07-30T23:01:26Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "```\r\n\u276f date -Iseconds -u -r 1721952000\r\n2024-07-26T00:00:00+00:00\r\n```",
              "createdAt": "2025-07-30T23:01:26Z",
              "updatedAt": "2025-07-30T23:01:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOO4VY2c6hj1pe",
      "title": "refactor: Remove mandatory MPIC from the validation process",
      "url": "https://github.com/sheurich/draft-sheurich-acme-dns-persist/pull/22",
      "state": "MERGED",
      "author": "sheurich",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This pull request refines the `draft-sheurich-acme-dns-persist.md` document by simplifying the validation process, enhancing security recommendations, and reorganizing key sections for clarity. The changes primarily focus on removing mandatory multi-perspective validation, emphasizing DNSSEC usage, and improving the structure of DNS security measures and validation data reuse.\r\n\r\n### Simplification of Validation Requirements:\r\n* Removed the requirement for mandatory multi-perspective validation in favor of simpler DNS query-based validation. This applies to both general domain validation and wildcard certificate validation examples.\r\n\r\n### Enhanced Security Recommendations:\r\n* Introduced a new section on DNS security measures, including detailed guidance on DNSSEC and optional multi-perspective validation for specific scenarios.\r\n\r\n### Reorganization and Clarification:\r\n* Reintroduced and reorganized the \"Validation Data Reuse and TTL Handling\" section to clarify the rules for effective validation periods and the use of the `persistUntil` parameter.\r\n\r\n### Removal of Redundant Content:\r\n* Removed redundant references to multi-perspective validation from various sections, aligning with the updated validation approach.\r\n\r\nFixes #12\r\nFixes #17\r\nFixes #20",
      "createdAt": "2025-07-31T15:32:31Z",
      "updatedAt": "2025-08-10T16:32:13Z",
      "baseRepository": "sheurich/draft-sheurich-acme-dns-persist",
      "baseRefName": "main",
      "baseRefOid": "b58c44306c46aec1b670f0a900670022e7693a76",
      "headRepository": "sheurich/draft-sheurich-acme-dns-persist",
      "headRefName": "dnssec-mpic",
      "headRefOid": "15978d0d73effa26652ebb54392d40dbcb1db609",
      "closedAt": "2025-08-01T15:54:50Z",
      "mergedAt": "2025-08-01T15:54:50Z",
      "mergedBy": "sheurich",
      "mergeCommit": {
        "oid": "7328886db42b666a832cc3fbd2c72ae5fdb15caf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOO4VY2c63VvYT",
          "commit": {
            "abbreviatedOid": "73f6dd9"
          },
          "author": "copilot-pull-request-reviewer",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "## Pull Request Overview\n\nThis pull request refactors the ACME DNS persistence validation specification by removing mandatory multi-perspective validation requirements and enhancing DNS security guidance. The changes simplify the validation process while maintaining security through optional measures and better organization of security recommendations.\n\n- Removed mandatory multi-perspective issuance corroboration (MPIC) requirement from the core validation process\n- Added new DNS security measures section with guidance on DNSSEC and optional MPIC implementation\n- Reorganized validation data reuse and TTL handling content for better clarity\n\n\n<details>\n<summary>Comments suppressed due to low confidence (1)</summary>\n\n**draft-sheurich-acme-dns-persist.md:167**\n* The parameter name `issuer-domain-name` is inconsistent with the format used elsewhere in the document. Based on the examples and other references, it should be `issuer-domain-name` without backticks or use consistent formatting throughout.\n```\nThe ACME server verifies the challenge by performing a DNS lookup for the TXT record at the Authorization Domain Name and checking that its RDATA conforms to the required structure and contains both the correct `issuer-domain-name` and a valid `accounturi` for the requesting account. The server also interprets any `policy` parameter values according to this specification.\n```\n</details>\n\n",
          "createdAt": "2025-07-31T15:33:02Z",
          "updatedAt": "2025-07-31T15:33:03Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "The specification changed from a concrete requirement (\"at least as often as the effective Validation Data Reuse Period\" and \"MUST occur no less frequently than every 8 hours\") to a vague recommendation (\"intervals of a few hours\"). This makes the API behavior less predictable and could lead to inconsistent implementations across different CAs.\n```suggestion\n* Periodically re-check active `dns-persist-01` authorizations to confirm the continued presence and validity of the DNS TXT record. To limit the window of opportunity for misuse after a record is removed, these re-checks MUST occur at intervals no greater than 8 hours.\n```",
              "createdAt": "2025-07-31T15:33:02Z",
              "updatedAt": "2025-07-31T15:33:03Z"
            }
          ]
        }
      ]
    }
  ]
}